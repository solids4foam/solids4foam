/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     |
    \\  /    A nd           | For copyright notice see file Copyright
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of solids4foam.

    solids4foam is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version.

    solids4foam is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with solids4foam.  If not, see <http://www.gnu.org/licenses/>.

Class
    fixedTemperatureGradientFvPatchScalarField

Description
    Fixed temperature gradient boundary condition for thermal-solid
    foam solvers.
    Essentially fixedGradient with non-orthogonal correction.

Author
   Philip Cardiff UCD

SourceFiles
    fixedTemperatureGradientFvPatchScalarField.C

\*---------------------------------------------------------------------------*/

#ifndef fixedTemperatureGradientFvPatchScalarField_H
#define fixedTemperatureGradientFvPatchScalarField_H

#include "foamTime.H"
#include "fvPatchFields.H"
#include "fixedGradientFvPatchFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
             Class fixedTemperatureGradientFvPatchScalarField Declaration
\*---------------------------------------------------------------------------*/

class fixedTemperatureGradientFvPatchScalarField
:
    public fixedGradientFvPatchScalarField
{

    // Private Data

        //- Name of the temperature field
        word fieldName_;


public:

    //- Runtime type information
    TypeName("fixedTemperatureGradient");


    // Constructors

        //- Construct from patch and internal field
        fixedTemperatureGradientFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        fixedTemperatureGradientFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping given
        //  fixedTemperatureGradientFvPatchScalarField onto a new patch
        fixedTemperatureGradientFvPatchScalarField
        (
            const fixedTemperatureGradientFvPatchScalarField&,
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const fvPatchFieldMapper&
        );

        //- Construct as copy
        fixedTemperatureGradientFvPatchScalarField
        (
            const fixedTemperatureGradientFvPatchScalarField&
#ifdef OPENFOAM_ORG
        ) = delete;
#else
        );

        //- Construct and return a clone
        virtual tmp<fvPatchScalarField> clone() const
        {
            return tmp<fvPatchScalarField>
            (
                new fixedTemperatureGradientFvPatchScalarField(*this)
            );
        }
#endif

        //- Construct as copy setting internal field reference
        fixedTemperatureGradientFvPatchScalarField
        (
            const fixedTemperatureGradientFvPatchScalarField&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchScalarField> clone
        (
            const DimensionedField<scalar, volMesh>& iF
        ) const
        {
            return tmp<fvPatchScalarField>
            (
                new fixedTemperatureGradientFvPatchScalarField(*this, iF)
            );
        }



    // Member functions

        // Mapping functions

            //- Map (and resize as needed) from self given a mapping object
            virtual void autoMap
            (
                const fvPatchFieldMapper&
            );

            //- Reverse map the given fvPatchField onto this fvPatchField
            virtual void rmap
            (
                const fvPatchScalarField&,
                const labelList&
            );


        //- Update the coefficients associated with the patch field
        //virtual void updateCoeffs();

        //- Evaluate the patch field
        virtual void evaluate
        (
            const Pstream::commsTypes commsType=Pstream::blocking
        );

        //- Write
        virtual void write(Ostream&) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
