/*--------------------------------*- C++ -*----------------------------------*\
| solids4foam: solid mechanics and fluid-solid interaction simulations        |
| Version:     v2.0                                                           |
| Web:         https://solids4foam.github.io                                  |
| Disclaimer:  This offering is not approved or endorsed by OpenCFD Limited,  |
|              producer and distributor of the OpenFOAM software via          |
|              www.openfoam.com, and owner of the OPENFOAM® and OpenCFD®      |
|              trade marks.                                                   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      DD;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    topLoading
    {
        type           fixedDisplacement;
        displacementSeries
        {
            "fileName|file"       "$FOAM_CASE/constant/timeVsDisp";
            outOfBounds    clamp;
        }
        value          uniform ( 0 0 0 );
    }

    cylinderContact
    {
        type            solidContact;
        master          no;
        shadowPatch     topContact;
        value           uniform (0 0 0);
    }

    topContact
    {
        type            solidContact;
        master          yes;
        rigidMaster     yes;
        shadowPatch     cylinderContact;
        normalContactModel standardPenalty;
        standardPenaltyNormalModelDict
        {
            penaltyScale     1;
            relaxationFactor 0.02;
        }
        frictionContactModel frictionless; //standardPenalty;
        standardPenaltyFrictionModelDict
        {
            relaxationFactor 0.02;
            penaltyScale     1;
            frictionLaw     coulomb;
            frictionLawDict
            {
                frictionCoeff   0.3;
            }
        }
        value           uniform (0 0 0);
    }

    symmetry-x
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }

    symmetry-y
    {
        type            solidSymmetry;
        patchType       symmetryPlane;
        value           uniform (0 0 0);
    }

    back
    {
        type            empty;
    }

    front
    {
        type            empty;
    }
}

// ************************************************************************* //
